package io.lowcode.platform.domain;

import static io.lowcode.platform.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class DocumentTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTypeAllPropertiesEquals(DocumentType expected, DocumentType actual) {
        assertDocumentTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTypeAllUpdatablePropertiesEquals(DocumentType expected, DocumentType actual) {
        assertDocumentTypeUpdatableFieldsEquals(expected, actual);
        assertDocumentTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTypeAutoGeneratedPropertiesEquals(DocumentType expected, DocumentType actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTypeUpdatableFieldsEquals(DocumentType expected, DocumentType actual) {
        assertThat(actual)
            .as("Verify DocumentType relevant properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDocumentode()).as("check documentode").isEqualTo(expected.getDocumentode()))
            .satisfies(a -> assertThat(a.getFlagActive()).as("check flagActive").isEqualTo(expected.getFlagActive()))
            .satisfies(a -> assertThat(a.getCreateUser()).as("check createUser").isEqualTo(expected.getCreateUser()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a -> assertThat(a.getUpdateUser()).as("check updateUser").isEqualTo(expected.getUpdateUser()))
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getUuid()).as("check uuid").isEqualTo(expected.getUuid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentTypeUpdatableRelationshipsEquals(DocumentType expected, DocumentType actual) {
        assertThat(actual)
            .as("Verify DocumentType relationships")
            .satisfies(a -> assertThat(a.getDocument()).as("check document").isEqualTo(expected.getDocument()));
    }
}
