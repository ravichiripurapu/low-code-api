package io.lowcode.platform.domain;

import static io.lowcode.platform.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PublicationTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationTypeAllPropertiesEquals(PublicationType expected, PublicationType actual) {
        assertPublicationTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertPublicationTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationTypeAllUpdatablePropertiesEquals(PublicationType expected, PublicationType actual) {
        assertPublicationTypeUpdatableFieldsEquals(expected, actual);
        assertPublicationTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationTypeAutoGeneratedPropertiesEquals(PublicationType expected, PublicationType actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationTypeUpdatableFieldsEquals(PublicationType expected, PublicationType actual) {
        assertThat(actual)
            .as("Verify PublicationType relevant properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a ->
                assertThat(a.getPublicationTypeName()).as("check publicationTypeName").isEqualTo(expected.getPublicationTypeName())
            )
            .satisfies(a ->
                assertThat(a.getPublicationTypeCode()).as("check publicationTypeCode").isEqualTo(expected.getPublicationTypeCode())
            )
            .satisfies(a -> assertThat(a.getFlagActive()).as("check flagActive").isEqualTo(expected.getFlagActive()))
            .satisfies(a -> assertThat(a.getCreateUser()).as("check createUser").isEqualTo(expected.getCreateUser()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a -> assertThat(a.getUpdateUser()).as("check updateUser").isEqualTo(expected.getUpdateUser()))
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getUuid()).as("check uuid").isEqualTo(expected.getUuid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationTypeUpdatableRelationshipsEquals(PublicationType expected, PublicationType actual) {
        assertThat(actual)
            .as("Verify PublicationType relationships")
            .satisfies(a -> assertThat(a.getPublication()).as("check publication").isEqualTo(expected.getPublication()));
    }
}
