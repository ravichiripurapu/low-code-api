package io.lowcode.platform.domain;

import static io.lowcode.platform.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PublicationFormAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationFormAllPropertiesEquals(PublicationForm expected, PublicationForm actual) {
        assertPublicationFormAutoGeneratedPropertiesEquals(expected, actual);
        assertPublicationFormAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationFormAllUpdatablePropertiesEquals(PublicationForm expected, PublicationForm actual) {
        assertPublicationFormUpdatableFieldsEquals(expected, actual);
        assertPublicationFormUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationFormAutoGeneratedPropertiesEquals(PublicationForm expected, PublicationForm actual) {
        assertThat(actual)
            .as("Verify PublicationForm auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationFormUpdatableFieldsEquals(PublicationForm expected, PublicationForm actual) {
        assertThat(actual)
            .as("Verify PublicationForm relevant properties")
            .satisfies(a -> assertThat(a.getFieldLabel()).as("check fieldLabel").isEqualTo(expected.getFieldLabel()))
            .satisfies(a -> assertThat(a.getFieldType()).as("check fieldType").isEqualTo(expected.getFieldType()))
            .satisfies(a -> assertThat(a.getFieldName()).as("check fieldName").isEqualTo(expected.getFieldName()))
            .satisfies(a -> assertThat(a.getFieldId()).as("check fieldId").isEqualTo(expected.getFieldId()))
            .satisfies(a -> assertThat(a.getFieldClass()).as("check fieldClass").isEqualTo(expected.getFieldClass()))
            .satisfies(a -> assertThat(a.getFieldPlaceholder()).as("check fieldPlaceholder").isEqualTo(expected.getFieldPlaceholder()))
            .satisfies(a -> assertThat(a.getFieldOptions()).as("check fieldOptions").isEqualTo(expected.getFieldOptions()))
            .satisfies(a -> assertThat(a.getFieldConfigs()).as("check fieldConfigs").isEqualTo(expected.getFieldConfigs()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getOrderPosition()).as("check orderPosition").isEqualTo(expected.getOrderPosition()))
            .satisfies(a -> assertThat(a.getValidationConfigs()).as("check validationConfigs").isEqualTo(expected.getValidationConfigs()))
            .satisfies(a -> assertThat(a.getErrorMessage()).as("check errorMessage").isEqualTo(expected.getErrorMessage()))
            .satisfies(a -> assertThat(a.getFlagRequired()).as("check flagRequired").isEqualTo(expected.getFlagRequired()))
            .satisfies(a -> assertThat(a.getFlagActive()).as("check flagActive").isEqualTo(expected.getFlagActive()))
            .satisfies(a -> assertThat(a.getCreateUser()).as("check createUser").isEqualTo(expected.getCreateUser()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a -> assertThat(a.getUpdateUser()).as("check updateUser").isEqualTo(expected.getUpdateUser()))
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getUuid()).as("check uuid").isEqualTo(expected.getUuid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPublicationFormUpdatableRelationshipsEquals(PublicationForm expected, PublicationForm actual) {
        assertThat(actual)
            .as("Verify PublicationForm relationships")
            .satisfies(a -> assertThat(a.getPublication()).as("check publication").isEqualTo(expected.getPublication()));
    }
}
