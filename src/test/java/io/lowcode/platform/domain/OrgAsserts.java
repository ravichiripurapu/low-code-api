package io.lowcode.platform.domain;

import static io.lowcode.platform.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class OrgAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrgAllPropertiesEquals(Org expected, Org actual) {
        assertOrgAutoGeneratedPropertiesEquals(expected, actual);
        assertOrgAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrgAllUpdatablePropertiesEquals(Org expected, Org actual) {
        assertOrgUpdatableFieldsEquals(expected, actual);
        assertOrgUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrgAutoGeneratedPropertiesEquals(Org expected, Org actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrgUpdatableFieldsEquals(Org expected, Org actual) {
        assertThat(actual)
            .as("Verify Org relevant properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAddress1()).as("check address1").isEqualTo(expected.getAddress1()))
            .satisfies(a -> assertThat(a.getAddress2()).as("check address2").isEqualTo(expected.getAddress2()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getState()).as("check state").isEqualTo(expected.getState()))
            .satisfies(a -> assertThat(a.getZipcode()).as("check zipcode").isEqualTo(expected.getZipcode()))
            .satisfies(a ->
                assertThat(a.getCreatedTimestamp())
                    .as("check createdTimestamp")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedTimestamp())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedTimestamp())
                    .as("check updatedTimestamp")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedTimestamp())
            )
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrgUpdatableRelationshipsEquals(Org expected, Org actual) {
        // empty method
    }
}
